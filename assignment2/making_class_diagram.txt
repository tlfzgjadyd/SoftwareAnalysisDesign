<클래스 다이어그램 만들기>

Step1. 명사를 밑줄쳐라
Step2. 올바른 클래스 유지(1)

⚫ 불필요하고 잘못된 클래스는 다음 기준에 따라 폐기하십시오.

⚫폐기기준
	-중복 클래스
		->두 등급이 같은 정보를 표현할 경우 가장 서술적인 명칭을 보관해야 한다.
	-관련 없는 클래스
		-> 학급이 그 문제와 거의 관련이 없거나 전혀 관련이 없는 경우, a과 함께 제거한다.
	-막연한 클래스
		-> 클래스는 구체화되어야 한다.
		->경계가 잘못되었거나 너무 넓은 범위 제거

=======================================
Step2. 올바른 클래스 유지(2)

⚫ 속성
	-개별 객체를 주로 기술하는 명칭은 속성으로 재작성하여야 한다.

⚫ 연산
	-명칭이 사물에 적용되고 그 자체로 조작되지 않는 작업을 기술하는 경우에는 폐기한다.
⚫ 역할
	- 계급의 명칭은 학회에서 수행하는 역할이 아닌 본질적인 성격을 반영해야 한다.

	- 특정 역할을 나타내는 클래스는 폐기한다.
⚫ 구현 구성
	- 현실과 무관한 구조물은 폐기되어야 한다.
	- 설계 단계 중 나중에 필요할 수 있다.
=======================================
Step2. 올바른 클래스 유지(3)

⚫가치를 나타내는 후보자 클래스
	-값도 명사로 표현한다.

⚫보고서/출력이라는 뜻의 후보자 수업
	-보고서 및 출력은 호출 방법의 결과일 뿐이다.
=======================================
Step2. 올바른 클래스 유지(4)

⚫안좋은 클래스들
	-그림

⚫좋은 클래스들
	-그림
=======================================
<표기법>
⚫ UML 속성 표기법
	- 대중 가시성 : 기호는 +
	- 비공개 가시성 : 기호는 -
	- 가시성 보호 : 기호는 #
	- 불완전한 가시성 : 기호는 ~

⚫ UML 함수 표기법
	- 시정성 이름(매개변수) : 반환형 [다중성] {property-string}
================================================
<클래스간의 관계>

⚫ Aggregation 집계
	- has관계, part of 관계, consist of 관계

⚫ Composition 구성
	- 더 강한 형태의 집적
	- 부품 물체는 하나의 전체 물체에만 속할 수 있다.

⚫ Association 연결
	-독립해서 존재

⚫ Aggregation 집계
	- 전체 부품은 부품과 함께 존재한다.

⚫ Composition 구성
	- 전체가 삭제되면 부품이 삭제된다.
================================================
